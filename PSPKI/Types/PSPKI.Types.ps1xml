<?xml version="1.0" encoding="utf-8" ?>
<Types>
  <Type>
    <Name>System.Security.Cryptography.Oid</Name>
    <Members>
      <ScriptMethod>
        <Name>Equal</Name>
        <Script>
          param(
            [Parameter(Mandatory = $true)]
            [Security.Cryptography.Oid]$OID
          )
          if ($OID.FriendlyName -ne $null) {
            if ($this.FriendlyName -eq $OID.FriendlyName) {[bool]$true} else {[bool]$false}
          } else {
            if ($this.Value -eq $OID.Value) {[bool]$true} else {[bool]$false}
          }
        </Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.Security.Cryptography.Oid[]</Name>
    <Members>
      <ScriptMethod>
        <Name>AddOid</Name>
        <Script>
          $OIDs = $args[0]
          [System.Security.Cryptography.Oid[]]$Existing = $this
          foreach ($OID in $OIDs) {
            if ($OID.FriendlyName -ne $null) {
              if (!($Existing | ?{$_.FriendlyName -eq $OID.FriendlyName})) {
                $Existing += $OID
              }
            } else {
              if (!($Existing | ?{$_.Value -eq $OID.Value})) {
                $Existing += $OID
              }
            }
          }
          [System.Security.Cryptography.Oid[]]$Existing
        </Script>
      </ScriptMethod>
      <ScriptMethod>
        <Name>RemoveOid</Name>
        <Script>
          $OIDs = $args[0]
          [System.Security.Cryptography.Oid[]]$Existing = $this
          foreach ($OID in $OIDs) {
            if ($OID.FriendlyName -ne $null) {
              $Existing = $Existing | ?{$_.FriendlyName -ne $OID.FriendlyName}
            } else {
              $Existing = $Existing | ?{$_.Value -ne $OID.Value}
            }
          }
          [System.Security.Cryptography.Oid[]]$Existing
        </Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.Security.Cryptography.X509Certificates.X509ChainStatus</Name>
    <Members>
      <ScriptMethod>
        <Name>ToString</Name>
        <Script>
          $this.Status
        </Script>
      </ScriptMethod>
    </Members>
  </Type>
  <Type>
    <Name>System.Management.Automation.Signature</Name>
    <Members>
      <ScriptProperty>
        <Name>SigningTime</Name>
        <GetScriptBlock>
          $sTime = $null
          if ($this.SignerCertificate -eq $null) {return}

          $SignedCms = [SysadminsLV.PKI.Utils.CLRExtensions.FileInfoExtensions]::GetSignatureObject($this.ProviderPath)
          if ($SignedCms -eq $null) {return}

          # it appears there are two types of counter signing: PKCS#9 or RFC3161.
          # -- in PKCS#9, timestamp is stored in signed attribute with OID = 1.2.840.113549.1.9.6
          # -- in RFC3161, timestamp is stored in embedded PKCS#9 object which is stored in unsigned attribute
          $Pkcs9_counterSign = "1.2.840.113549.1.9.6"
          $RFC3161_counterSign = "1.3.6.1.4.1.311.3.3.1"
          $SigningTime = "1.2.840.113549.1.9.5"

          # attempt to read PKCS#9
          $counter = $SignedCms.SignerInfos | ForEach-Object {$_.UnauthenticatedAttributes[$Pkcs9_counterSign]} | select -First 1

          if ($counter) {
              $attr = $counter.AuthenticatedAttributes[$SigningTime] | select -first 1
              if ($attr) {
                  $pkcs9sig_attr = New-Object System.Security.Cryptography.Pkcs.Pkcs9SigningTime (,$attr.RawData)
                  $sTime = $pkcs9sig_attr.SigningTime.ToLocalTime()
              }
          } else {
              # attempt to read RFC3161
              $nested = $SignedCms.SignerInfos | ForEach-Object {$_.UnauthenticatedAttributes[$RFC3161_counterSign]} | select -First 1
              if ($nested) {
                  $counterCms = New-Object SysadminsLV.PKI.Cryptography.Pkcs.DefaultSignedPkcs7 (,$nested.RawData)
                  $attr = $counterCms.SignerInfos | ForEach-Object {$_.AuthenticatedAttributes[$SigningTime]} | select -first 1
                  if ($attr) {
                      $timeAttr = New-Object System.Security.Cryptography.Pkcs.Pkcs9SigningTime (,$attr.RawData)
                      $sTime = $timeAttr.SigningTime.ToLocalTime()
                  }
              }
          }
          $sTime
        </GetScriptBlock>
      </ScriptProperty>
      <ScriptProperty>
        <Name>EncodedSignature</Name>
        <GetScriptBlock>
          if ($this.SignerCertificate -eq $null) {return}
          [SysadminsLV.PKI.Utils.CLRExtensions.FileInfoExtensions]::GetSignatureObject($this.ProviderPath)
        </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
  <Type>
    <Name>System.Security.Cryptography.X509Certificates.X509Certificate2</Name>
    <Members>
      <ScriptProperty>
        <Name>ResolvedExtensions</Name>
        <GetScriptBlock>
          if ($this.Extensions -eq $null) {
            $null
            return
          }
          [SysadminsLV.PKI.Utils.CLRExtensions.X509Certificate2Extensions]::ResolveExtensions($this)
        </GetScriptBlock>
      </ScriptProperty>
    </Members>
  </Type>
  <Type>
    <Name>System.Security.Cryptography.X509Certificates.X509Certificate2</Name>
    <Members>
      <ScriptMethod>
        <Name>DeletePrivateKey</Name>
        <Script>
          [SysadminsLV.PKI.Utils.CLRExtensions.X509Certificate2Extensions]::DeletePrivateKey($this)
        </Script>
      </ScriptMethod>
    </Members>
  </Type>
</Types>